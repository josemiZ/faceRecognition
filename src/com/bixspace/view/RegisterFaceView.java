package com.bixspace.view;

import com.bixspace.utils.FaceRecognition;
import com.bixspace.utils.TransformToImage;
import org.bytedeco.javacpp.opencv_core;
import org.opencv.core.*;
import org.opencv.core.Point;
import org.opencv.highgui.Highgui;
import org.opencv.highgui.VideoCapture;
import org.opencv.objdetect.CascadeClassifier;


import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.net.URL;

import static org.bytedeco.javacpp.opencv_core.cvGetSeqElem;
import static org.bytedeco.javacpp.opencv_imgcodecs.cvLoadImage;

/**
 * Created by MIGUEL ZEA on 5/11/2016.
 */
public class RegisterFaceView extends JFrame {
    private String name=null;
    private String last_name=null;
    private DaemonThread myThread = null;
    int count = 0;
    private VideoCapture webSource = new VideoCapture(0);
    private Thread t;
    private Mat frame = new Mat();
    MatOfByte mem = new MatOfByte();
    CascadeClassifier faceDetector = new CascadeClassifier(".\\resources\\haarcascade_frontalface_alt.xml");
    MatOfRect faceDetections = new MatOfRect();
///

    class DaemonThread implements Runnable {

        protected volatile boolean runnable = false;

        @Override
        public void run() {
            synchronized (this) {
                while (runnable) {
                    if (webSource.grab()) {
                        try {
                            webSource.retrieve(frame);
                            Graphics g = jPanel1.getGraphics();
                            faceDetector.detectMultiScale(frame, faceDetections);
                            for (Rect rect : faceDetections.toArray()) {
                                Core.rectangle(frame, new Point(rect.x, rect.y), new Point(rect.x + rect.width, rect.y + rect.height),
                                        new Scalar(0, 255,0));
                            }
                            Highgui.imencode(".bmp", frame, mem);
                            Image im = ImageIO.read(new ByteArrayInputStream(mem.toArray()));
                            BufferedImage buff = (BufferedImage) im;
                            if (g.drawImage(buff, 0, 0, getWidth(), getHeight()-150 , 0, 0, buff.getWidth(), buff.getHeight(), null)) {
                                if (runnable == false) {
                                    System.out.println("Paused ..... ");
                                    this.wait();
                                }
                            }
                            if(count==10){
                                jButton1.setEnabled(false);
                                jButton2.setEnabled(true);
                            }
                        } catch (Exception ex) {
                            System.out.println("Error");
                        }
                    }
                }
            }
        }
    }

/////////
    /**
     * Creates new form RecognizeFaceFromCameraView
     */



    public RegisterFaceView(String name,String last_name) {
        this.name=name;
        this.last_name=last_name;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jPanel1 = new JPanel();
        jButton1 = new JButton();
        jButton2 = new JButton();

        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGap(0, 376, Short.MAX_VALUE)
        );

        jButton1.setText("Tomar Foto");
        jButton1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Siguiente");
        jButton2.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
                        .addGroup(layout.createSequentialGroup()
                                .addGap(255, 255, 255)
                                .addComponent(jButton1)
                                .addGap(86, 86, 86)
                                .addComponent(jButton2)
                                .addContainerGap(258, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(jButton1)
                                        .addComponent(jButton2))
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        jButton2.setEnabled(false);
        myThread = new DaemonThread(); //create object of threat class
        t = new Thread(myThread);
        t.setDaemon(true);
        myThread.runnable = true;
        t.start();
    }// </editor-fold>

    private void jButton2ActionPerformed(ActionEvent evt) {

        try {
            FaceRecognition reconocer = FaceRecognition.getInstance();

            //Entrenamiento
            opencv_core.IplImage[] trainImages = new opencv_core.IplImage[10];
            for (int i = 0; i < 10; i++) {
                trainImages[i] = cvLoadImage("C:\\tutor_assistance\\data\\images\\" +name+" "+last_name+""+ i + ".jpg");
                opencv_core.CvSeq faces = reconocer.detectFace(trainImages[i]);
                opencv_core.CvRect r = new opencv_core.CvRect(cvGetSeqElem(faces, 0));
                trainImages[i] = reconocer.preprocessImage(trainImages[i], r);
            }
            reconocer.learnNewFace(name+" "+last_name, trainImages);
        }catch (Exception e){
            e.printStackTrace();
        }finally {
            dispose();
            LandingView landingView = new LandingView();
            landingView.show();

        }

    }

    private void jButton1ActionPerformed(ActionEvent evt) {

        if(webSource.read(frame)){
            if (count!=10){
            BufferedImage image = TransformToImage.MatToBufferedImage(frame);
            window(image, "Imagen "+(count+1));
            }else{
                jButton1.setEnabled(false);
                jButton2.setEnabled(true);
            }
        }


    }

    @Override
    public void dispose() {
        myThread.runnable=false;
        webSource.release();
        super.dispose();
    }


    public void window(BufferedImage img, String text) {
        JFrame frame0 = new JFrame();
        frame0.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame0.setTitle(text);
        frame0.setSize(img.getWidth(), img.getHeight() + 60);
        frame0.setLocationRelativeTo(null);
        frame0.setVisible(true);
        frame0.add(new ShowPhotoView(img));
        JPanel buttonPanel = new JPanel();
        Button button = new Button("Grabar");
        buttonPanel.add(button);
        frame0.add(buttonPanel,BorderLayout.PAGE_END);
        button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                saveImage(img);
                count++;
                frame0.dispose();
            }
        });
    }

    public void saveImage(BufferedImage img) {
        File directory = new File("C:\\tutor_assistance\\data\\images");
        if(!directory.exists()){
            if(directory.mkdirs()){
                System.out.println("Creado");

            }else{
                System.out.println("Error");
            }
        }
        try {
            File outputfile = new File("C:\\tutor_assistance\\data\\images\\"+name+" "+last_name+""+count+".jpg");
            if(outputfile.exists()){
                outputfile.delete();
            }
            ImageIO.write(img, "jpg", outputfile);
        } catch (Exception e) {
            System.out.println("error");
        }

    }



    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify
    private JButton jButton1;
    private JButton jButton2;
    private JPanel jPanel1;
    // End of variables declaration
}

